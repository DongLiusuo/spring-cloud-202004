Eureka  Java    AP  可配支持    HTTP    以集成
Consul  Go      CP  客户端

Ribbon : Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端 负载均衡的工具
    主要功能：是提供客户端的软件负载均衡算法的服务调用
        LB Load Balancer负载均衡：简单的说就是将用户的请求平摊到分配的多个服务器上，从而达到系统的HA（高可用）
                                     常见的负载均衡有软件Nginx LVS 硬件 F5等。
        Ribbon本地负载均衡客户端 VS Nginx服务端负载均衡的区别
            Nginx是服务器负载均衡，客户端所有的请求都会交给nginx 然后由nginx实现转发请求，即负载均衡是由服务端实现的
            Ribbon本地负载均衡，在调用服务接口的时候，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术
        集中式LB
            即在服务的消费方和提供方之间使用独立的LB设施（可以是硬件，如F5，也可以是软件，如Nginx），由该设施负责把访问请求通过某种策略转发到服务的提供方
        进程内LB
            将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。
            Ribbon就属于进程内LB，它只是一个类库，集成于消费方进程，消费方通过它来获取服务提供方的地址
    一句话：负载均衡+RestTemplate调用
    Ribbon其实就是一个软负载均衡的客户端软件，它可以和其他所需请求的客户端结合使用，和eureka结合只是其中的一个实例。
    Ribbon在工作时分成两步
        1.先选择eurekaServer，它优先选择在同一个区域内负载较少的server
        2.根据用户指定的策略，在从server取到的服务注册列表中选择一个地址
        其中ribbon提供了多种策略：比如轮询、随机和根据相应时间加权

RestTemplate：
    getForObject() 返回对象为响应体中数据转化成的对象 基本上可以理解为json
    getForEntity()  返回对象为ResponseEntity对象，包含了响应中的一些重要信息，比如响应头、响应状态码、响应体等

    Ribbon负载均衡算法
       IRule：     com.netflix.loadbalancer.RoundRobinRule 轮询
                    com.netflix.loadbalancer.RandomRule      随机
                    com.netflix.loadbalancer.RetryRule       先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内重试，获取可用的服务
                    WeightedResponseTimeRule                    对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择
                    BestAvailableRule                           会先过滤掉由于多次访问故障而处于断路跳闸状态的服务，然后选择一个并发量最小的服务
                    AvailabilityFilteringRule                   先过滤掉故障实例，再选择并发较小的实例
                    ZoneAvoidanceRule                           默认规则，复合判断server所在区域的性能和server的可用性选择服务器
       如何替换
            package org.example.myrule包，并修改主启动

手写一个负载的算法
    原理+JUC